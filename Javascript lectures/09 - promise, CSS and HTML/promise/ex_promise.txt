
ok = (d) => {
	console.log('OKKKKKK');
	return {
		ok:2
	};
}

fail = (e) => {
	console.log(e);
}

function o() {
console.log('END');
	return {
		a:1
	};
}

function dispatch(data) {
	console.log('dispatch' , data);
}

function p2() {
	return new Promise((resolve, reject) => {
    	setTimeout(() => resolve("done!"), 2000)
  	});	
}


function p1() {
	return new Promise((resolve, reject) => {
    	setTimeout(() => resolve(p2()), 2000)
  	});	
}


function test() {
	p1()
	.then(v => {
		
		return p1();
	})
	.then(v => {
		//
		//return mywrapper(p1);

		//TODO-search for function wrap to primise javascript
		
	})
	.then(v => {
		return p1();
	})
	.catch(ex => {

	})
	.finally(v => {
		console.log('ok');
	})

}

async function f() {

  let promise = new Promise((resolve, reject) => {
    setTimeout(() => resolve("done!"), 1000)
  });

  const p = promise
  .then(ok)
	.catch(fail)
	.then(dispatch)
	.then(o)
	.then(dispatch)

	return p;

}

async function test() {
	let x = await f();
	console.log('sdddffff');	
	console.log(x);	

}

test();
//f();

